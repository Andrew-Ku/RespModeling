;--Инициализирующий блок----------------
Time EQU 1000000 ; время моелирования
ObservationTime EQU 100 ; время наблюдения
Lambda0_1 EQU 0.002
Lambda0_2 EQU 1
Lambda1_3 EQU 1
Lambda2_3 EQU 0.002

NextStateMat MATRIX ,1,2; матрица для хранения времени и следующего состояния
StateTimeMat MATRIX ,1,4; матрица времен нахождения системы в соответсвующем состоянии
StateCountMat MATRIX ,1,4; матрица количества попаданий системы в соответсвующем состоянии
RejectByTimeMat MATRIX ,1,3; вспомогательная матрица. 1 - Количество отказов за одно наблюдение, 2 - Количество измерений, 3 - Количество отказов за все время наблюдение
initial x$CorrectStateId,0 ;Метка для коррекции
initial x$StartStateMet,State0Met; стартовое состояние
initial x$RejectCount,0 ; Количество отказов за время наблюдения
initial x$RejectTime,0 ; Суммарное время до первого отказа за все время наблюдения

;---------------------------------------------------------------
;--Непонятный блок----------------
START 1
RMULT 1281
;---------------------------------------------------------------
;--Результирующий блок--------------------
GENERATE Time
SAVEVALUE correctTime,(CorrectStateTime(x$CorrectStateId,C1))
FinishMet SAVEVALUE TimeAll,C1
SAVEVALUE ProbReject,(1-(x$RejectCount/mx$RejectByTimeMat(1,2)))
SAVEVALUE MidRejectTime,(x$RejectTime/mx$RejectByTimeMat(1,3))
TERMINATE 1 
;--------------------------------------------------------------
;--Стартовый блок----------------
GENERATE	,,,1,
SEIZE NotWorkDev
RELEASE NotWorkDev
TRANSFER ,x$StartStateMet
;---------------------------------------------------------------
;--Блок наблюдения----------------
GENERATE	ObservationTime,,,,
SAVEVALUE RejectCount+,(CurrrentRejectProb())
Terminate
;---------------------------------------------------------------
;--Состояние 0-----------------------
State0Met SAVEVALUE LambdaTime0_1,(Exponential(1,0,1/Lambda0_1))
SAVEVALUE LambdaTime0_2,(Exponential(1,0,1/Lambda0_2))
ASSIGN ReturnState,ReturnState0Met
SAVEVALUE procHelpfulPar,(ChooseNextStateProc(x$LambdaTime0_1,State1Met,x$LambdaTime0_2,State2Met))
ASSIGN Time,MX$NextStateMat(1,1)
ASSIGN State,MX$NextStateMat(1,2)
ASSIGN StartTime,C1
SAVEVALUE CorrectStateId,0
MSAVEVALUE StateCountMat+,1,1,1
SAVEVALUE CurrentWorkTime+,p$Time
TRANSFER ,WorkDevMet
ReturnState0Met MSAVEVALUE StateTimeMat+,1,1,p$Time
TRANSFER ,p$State
;---------------------------------------------------------------
;--Состояние 1-----------------------
State1Met SAVEVALUE LambdaTime1_3,(Exponential(1,0,1/Lambda1_3))
ASSIGN ReturnState,ReturnState1Met
SAVEVALUE procHelpfulPar,(ChooseNextStateProc(x$LambdaTime1_3,State3Met,999999,999999))
ASSIGN Time,MX$NextStateMat(1,1)
ASSIGN State,MX$NextStateMat(1,2)
SAVEVALUE CorrectStateId,1
MSAVEVALUE StateCountMat+,1,2,1
SAVEVALUE CurrentWorkTime+,p$Time
TRANSFER ,WorkDevMet
ReturnState1Met MSAVEVALUE StateTimeMat+,1,2,p$Time
TRANSFER ,p$State
;---------------------------------------------------------------
;--Состояние 2-----------------------
State2Met SAVEVALUE LambdaTime2_3,(Exponential(1,0,1/Lambda2_3))
ASSIGN ReturnState,ReturnState2Met
SAVEVALUE procHelpfulPar,(ChooseNextStateProc(x$LambdaTime2_3,State3Met,999999,999999))
ASSIGN Time,MX$NextStateMat(1,1)
ASSIGN State,MX$NextStateMat(1,2)
SAVEVALUE CorrectStateId,2
MSAVEVALUE StateCountMat+,1,3,1
SAVEVALUE CurrentWorkTime+,p$Time
TRANSFER ,WorkDevMet
ReturnState2Met MSAVEVALUE StateTimeMat+,1,3,p$Time
TRANSFER ,p$State
;---------------------------------------------------------------
;--Состояние 3-----------------------
State3Met SAVEVALUE CorrectStateId,3
MSAVEVALUE StateCountMat+,1,4,1
TRANSFER ,NotWorkDevMet
;---------------------------------------------------------------
;--Нерабочее устройство--------
NotWorkDevMet SEIZE NotWorkDev
MSAVEVALUE RejectByTimeMat+,1,1,1
SAVEVALUE RejectTime+,(C1-p$StartTime)
RELEASE NotWorkDev
TRANSFER ,x$StartStateMet
;---------------------------------------------------------------
;--Рабочее устройство--------
WorkDevMet SEIZE WorkDev
ADVANCE p$Time
RELEASE WorkDev
TRANSFER ,p$ReturnState
;---------------------------------------------------------------
;--Блок процедур----------------
;--Процедура для поиска слудующего состояния ----------------
PROCEDURE ChooseNextStateProc(timeArg0,nextStateArg0,timeArg1,nextStateArg1)
BEGIN
TEMPORARY minTime,nextState;
minTime = timeArg0; nextState = nextStateArg0;
IF (minTime>timeArg1) THEN BEGIN minTime = timeArg1; nextState = nextStateArg1; END;
NextStateMat[1,1] = minTime; NextStateMat[1,2] = nextState;
Return (nextState);
END;
;--------------------------------------------------------------

;--Процедура для коррекции времени ----------------
PROCEDURE CorrectStateTime(currentStateArg, endTimeArg)
BEGIN
TEMPORARY countState,result;
countState = 1;
sumStateTimes = 0;
WHILE (countState <= 4) DO BEGIN
sumStateTimes = sumStateTimes + StateTimeMat[1,countState];
countState = countState+1;
END;
StateTimeMat[1, currentStateArg + 1] = StateTimeMat[1, currentStateArg + 1] + endTimeArg-sumStateTimes;
 Return(StateTimeMat[1, currentStateArg + 1]);
END;
;--------------------------------------------------------------

;--Процедура для определения данных связанных с отказами ----------------
PROCEDURE IsRejectByObservationTime()
BEGIN
RejectByTimeMat[1,2] = RejectByTimeMat[1,2] + 1;
RejectByTimeMat[1,3] = RejectByTimeMat[1,3] + RejectByTimeMat[1,1];
if(RejectByTimeMat[1,1] = 0) THEN Begin
return (0);
END;
RejectByTimeMat[1,1] = 0;
return (1);
END;
;--------------------------------------------------------------

